工厂方法是一种创建型设计模式，其在父类中提供一个创建对象的　方法，允许子类决定实例化对象的类型。

案例说明：
基础对话框类使用不同的 UI 组件渲染窗口。在不同的操作系统下，这些组件外观或许略有不同，但其功能保持一致。
Windows 系统中的按钮在 Linux 系统中仍然是按钮。如果使用工厂方法，就不需要为每种操作系统重写对话框逻
辑。如果我们声明了一个在基本对话框类中生成按钮的工厂方法，那么我们就可以创建一个对话框子类，
并使其通过工厂方法返回 Windows 样式按钮。子类将继承对话框基础类的大部分代码，
同时在屏幕上根据 Windows 样式渲染按钮。如需该模式正常工作，基础对话框类必须使用抽象按钮（例
如基类或接口），以便将其扩展为具体按钮。这样一来，无论对话框中使用何种类型的按钮，其代码都可以正常工作。
你可以使用此方法开发其他 UI 组件。


优点：
    你可以避免创建者和具体产品之间的紧密耦合。
    单一职责原则。你可以将产品创建代码放在程序的单一位置，从而使得代码更容易维护。
    开闭原则。无需更改现有客户端代码，你就可以在程序中引入新的产品类型。
缺点：
    应用工厂方法模式需要引入许多新的子类，代码可能会因此变得更复杂。最好的情况是将该模式引入创建者类的现有层次结构中。